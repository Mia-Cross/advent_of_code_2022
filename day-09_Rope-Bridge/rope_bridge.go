package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
)

func printSmallGrid(head, tail [2]int) {
	grid := [5][6]byte{
		{'s', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.'},
	}
	grid[head[1]][head[0]] = 'H'
	grid[tail[1]][tail[0]] = 'T'
	for i := 4; i >= 0; i-- {
		fmt.Printf("%s\n", grid[i])
	}
	fmt.Printf("=========\n")
}

func printLargeGrid(rope [][2]int) {
	grid := [21][26]byte{
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 's', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
	}
	for i := len(rope) - 1; i > 0; i-- {
		grid[rope[i][1]][rope[i][0]] = byte('0' + i)
	}
	grid[rope[0][1]][rope[0][0]] = 'H'
	for i := 20; i >= 0; i-- {
		fmt.Printf("%s\n", grid[i])
	}
	fmt.Printf("=====================================\n")
}

func printLargeGridPositions(visited [][2]int) {
	grid := [21][26]byte{
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 's', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
	}
	for i := range visited {
		grid[visited[i][1]][visited[i][0]] = '#'
	}
	for i := 20; i >= 0; i-- {
		fmt.Printf("%s\n", grid[i])
	}
}

func addIfNew(visited [][2]int, toAdd [2]int) [][2]int {
	for _, pair := range visited {
		if pair[0] == toAdd[0] && pair[1] == toAdd[1] {
			return visited
		}
	}
	return append(visited, toAdd)
}

func moveTail(head, tail [2]int) [2]int {
	if head[0]-tail[0] > 1 { // we need to move on the X-axis and head.x is bigger than tail.x
		tail[0]++
		tail[1] = head[1]
	} else if tail[0]-head[0] > 1 { // we need to move on the X-axis and head.x is smaller than tail.x
		tail[0]--
		tail[1] = head[1]
	} else if head[1]-tail[1] > 1 { // we need to move on the Y-axis and head.y is bigger than tail.y
		tail[1]++
		tail[0] = head[0]
	} else if tail[1]-head[1] > 1 { // we need to move on the Y-axis and head.y is smaller than tail.y
		tail[1]--
		tail[0] = head[0]
	}
	return tail
}

func countVisitedCells(data string, knotCount int) int {
	visited := [][2]int{{11, 5}}
	knots := [][2]int(nil)
	for i := 0; i < knotCount; i++ {
		knots = append(knots, [2]int{11, 5})
	}

	for _, move := range strings.Split(data, "\n") {
		nb, err := strconv.Atoi(move[2:])
		if err != nil {
			log.Fatalf("could not parse [%s]: %v", move, err)
		}
		for i := 0; i < nb; i++ {
			switch move[0] {
			case 'R':
				knots[0][0]++
			case 'L':
				knots[0][0]--
			case 'U':
				knots[0][1]++
			case 'D':
				knots[0][1]--
			}
			for i := 0; i < knotCount-1; i++ {
				knots[i+1] = moveTail(knots[i], knots[i+1])
			}
			visited = addIfNew(visited, knots[knotCount-1])
		}
		//printLargeGrid(knots)
	}
	printLargeGridPositions(visited)
	return len(visited)
}

func main() {
	buffer, err := os.ReadFile("rope_moves.txt")
	if err != nil {
		log.Fatalf("error parsing file: %v", err)
	}

	visitedTwoKnots := countVisitedCells(string(buffer), 2)
	visitedTenKnots := countVisitedCells(string(buffer), 10)

	fmt.Printf("Number of cells visited by the tail of the 2-knots-rope: %d\n", visitedTwoKnots)
	fmt.Printf("Number of cells visited by the tail of the 10-knots-rope: %d\n", visitedTenKnots)
	// 2655 is too high
}
